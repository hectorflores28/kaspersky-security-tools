#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Analizador de Vulnerabilidades
Este script analiza sistemas y aplicaciones en busca de vulnerabilidades conocidas,
incluyendo an치lisis de puertos, servicios, versiones y configuraciones.
"""

import os
import sys
import json
import logging
import nmap
import requests
import re
import socket
import subprocess
import pandas as pd
from datetime import datetime
from typing import Dict, List, Any, Optional
import concurrent.futures
from bs4 import BeautifulSoup

class VulnerabilityAnalyzer:
    def __init__(self, target: str):
        """
        Inicializa el analizador de vulnerabilidades
        
        Args:
            target (str): IP o dominio a analizar
        """
        self.target = target
        self.results = {
            'informacion_basica': {},
            'puertos_abiertos': [],
            'servicios': [],
            'vulnerabilidades': [],
            'configuraciones': {},
            'riesgo': 0
        }
        
        # Configurar logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        
    def escanear_puertos(self) -> List[Dict[str, Any]]:
        """
        Escanea los puertos abiertos en el objetivo
        
        Returns:
            List[Dict[str, Any]]: Informaci칩n de puertos abiertos
        """
        try:
            nm = nmap.PortScanner()
            nm.scan(self.target, arguments='-sV -sS -T4')
            
            puertos = []
            for host in nm.all_hosts():
                for proto in nm[host].all_protocols():
                    ports = nm[host][proto].keys()
                    for port in ports:
                        puerto = {
                            'numero': port,
                            'protocolo': proto,
                            'estado': nm[host][proto][port]['state'],
                            'servicio': nm[host][proto][port]['name'],
                            'version': nm[host][proto][port]['version'],
                            'producto': nm[host][proto][port]['product']
                        }
                        puertos.append(puerto)
                        
            self.results['puertos_abiertos'] = puertos
            return puertos
        except Exception as e:
            logging.error(f"Error al escanear puertos: {str(e)}")
            return []
            
    def analizar_servicios(self, puertos: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Analiza los servicios detectados
        
        Args:
            puertos (List[Dict[str, Any]]): Lista de puertos abiertos
            
        Returns:
            List[Dict[str, Any]]: Informaci칩n de servicios
        """
        try:
            servicios = []
            for puerto in puertos:
                servicio = {
                    'puerto': puerto['numero'],
                    'nombre': puerto['servicio'],
                    'version': puerto['version'],
                    'vulnerabilidades_conocidas': [],
                    'configuracion': {}
                }
                
                # Buscar vulnerabilidades conocidas
                if puerto['servicio'] == 'http' or puerto['servicio'] == 'https':
                    try:
                        response = requests.get(f"http://{self.target}:{puerto['numero']}", timeout=5)
                        servicio['configuracion']['headers'] = dict(response.headers)
                        
                        # Verificar servidor web
                        if 'Server' in response.headers:
                            servicio['configuracion']['servidor'] = response.headers['Server']
                            
                        # Verificar SSL/TLS
                        if puerto['servicio'] == 'https':
                            try:
                                cert = ssl.get_server_certificate((self.target, puerto['numero']))
                                x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, cert)
                                servicio['configuracion']['ssl'] = {
                                    'issuer': x509.get_issuer().CN,
                                    'expira': x509.get_notAfter().decode('utf-8'),
                                    'algoritmo': x509.get_signature_algorithm().decode('utf-8')
                                }
                            except:
                                servicio['configuracion']['ssl'] = {'error': 'No se pudo obtener certificado'}
                                
                    except:
                        servicio['configuracion']['error'] = 'No se pudo conectar al servicio'
                        
                servicios.append(servicio)
                
            self.results['servicios'] = servicios
            return servicios
        except Exception as e:
            logging.error(f"Error al analizar servicios: {str(e)}")
            return []
            
    def buscar_vulnerabilidades(self) -> List[Dict[str, Any]]:
        """
        Busca vulnerabilidades conocidas en los servicios
        
        Returns:
            List[Dict[str, Any]]: Lista de vulnerabilidades encontradas
        """
        try:
            vulnerabilidades = []
            
            # Analizar cada servicio
            for servicio in self.results['servicios']:
                # Verificar versiones vulnerables
                if servicio['nombre'] == 'http' or servicio['nombre'] == 'https':
                    if 'apache' in servicio['configuracion'].get('servidor', '').lower():
                        if '2.4.49' in servicio['configuracion']['servidor']:
                            vulnerabilidades.append({
                                'servicio': servicio['nombre'],
                                'puerto': servicio['puerto'],
                                'tipo': 'CVE-2021-41773',
                                'descripcion': 'Apache HTTP Server Path Traversal',
                                'severidad': 'Alta'
                            })
                            
                # Verificar configuraciones inseguras
                if servicio['nombre'] == 'ssh':
                    try:
                        output = subprocess.check_output(['ssh', '-V'], stderr=subprocess.STDOUT)
                        if 'OpenSSH' in output.decode():
                            if '7.7' in output.decode():
                                vulnerabilidades.append({
                                    'servicio': servicio['nombre'],
                                    'puerto': servicio['puerto'],
                                    'tipo': 'CVE-2018-15473',
                                    'descripcion': 'OpenSSH User Enumeration',
                                    'severidad': 'Media'
                                })
                    except:
                        pass
                        
            self.results['vulnerabilidades'] = vulnerabilidades
            return vulnerabilidades
        except Exception as e:
            logging.error(f"Error al buscar vulnerabilidades: {str(e)}")
            return []
            
    def analizar_configuraciones(self) -> Dict[str, Any]:
        """
        Analiza las configuraciones de los servicios
        
        Returns:
            Dict[str, Any]: Configuraciones analizadas
        """
        try:
            configuraciones = {}
            
            # Analizar cada servicio
            for servicio in self.results['servicios']:
                if servicio['nombre'] not in configuraciones:
                    configuraciones[servicio['nombre']] = []
                    
                configuraciones[servicio['nombre']].append({
                    'puerto': servicio['puerto'],
                    'configuracion': servicio['configuracion']
                })
                
            self.results['configuraciones'] = configuraciones
            return configuraciones
        except Exception as e:
            logging.error(f"Error al analizar configuraciones: {str(e)}")
            return {}
            
    def calcular_riesgo(self) -> int:
        """
        Calcula el nivel de riesgo basado en las vulnerabilidades encontradas
        
        Returns:
            int: Nivel de riesgo (0-100)
        """
        try:
            riesgo = 0
            
            # Riesgo por vulnerabilidades
            for vuln in self.results['vulnerabilidades']:
                if vuln['severidad'] == 'Alta':
                    riesgo += 30
                elif vuln['severidad'] == 'Media':
                    riesgo += 20
                else:
                    riesgo += 10
                    
            # Riesgo por puertos abiertos
            riesgo += len(self.results['puertos_abiertos']) * 5
            
            # Riesgo por servicios expuestos
            servicios_expuestos = ['http', 'https', 'ftp', 'telnet', 'ssh']
            riesgo += sum(1 for servicio in self.results['servicios'] 
                        if servicio['nombre'] in servicios_expuestos) * 10
            
            # Limitar riesgo a 100
            riesgo = min(riesgo, 100)
            
            self.results['riesgo'] = riesgo
            return riesgo
        except Exception as e:
            logging.error(f"Error al calcular riesgo: {str(e)}")
            return 0
            
    def generar_reporte(self, output_file: str):
        """
        Genera un reporte con los resultados del an치lisis
        
        Args:
            output_file (str): Ruta al archivo de salida
        """
        try:
            # Agregar metadatos al reporte
            reporte = {
                'fecha_analisis': datetime.now().isoformat(),
                'objetivo': self.target,
                'resultados': self.results
            }
            
            # Guardar reporte en JSON
            with open(output_file + '.json', 'w') as f:
                json.dump(reporte, f, indent=4)
                
            # Guardar reporte en CSV
            df = pd.DataFrame([{
                'objetivo': reporte['objetivo'],
                'fecha': reporte['fecha_analisis'],
                'riesgo': reporte['resultados']['riesgo'],
                'puertos_abiertos': len(reporte['resultados']['puertos_abiertos']),
                'vulnerabilidades': len(reporte['resultados']['vulnerabilidades']),
                'servicios_expuestos': sum(1 for servicio in reporte['resultados']['servicios'] 
                                        if servicio['nombre'] in ['http', 'https', 'ftp', 'telnet', 'ssh'])
            }])
            df.to_csv(output_file + '.csv', index=False)
            
            logging.info(f"Reporte generado en {output_file}.json y {output_file}.csv")
        except Exception as e:
            logging.error(f"Error al generar reporte: {str(e)}")

def main():
    parser = argparse.ArgumentParser(description='Analizador de Vulnerabilidades')
    parser.add_argument('target', help='IP o dominio a analizar')
    parser.add_argument('--output', default='reporte_vulnerabilidades', 
                       help='Ruta base para los archivos de salida')
    
    args = parser.parse_args()
    
    analyzer = VulnerabilityAnalyzer(args.target)
    
    # Realizar an치lisis
    puertos = analyzer.escanear_puertos()
    servicios = analyzer.analizar_servicios(puertos)
    vulnerabilidades = analyzer.buscar_vulnerabilidades()
    configuraciones = analyzer.analizar_configuraciones()
    riesgo = analyzer.calcular_riesgo()
    
    # Generar reporte
    analyzer.generar_reporte(args.output)

if __name__ == "__main__":
    main() 