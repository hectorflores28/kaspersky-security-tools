#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Detector de Malware Básico
Este script realiza una detección básica de malware mediante
análisis de firmas y comportamiento.
"""

import os
import hashlib
import pefile
import magic
import logging
from datetime import datetime
import json
import argparse
from pathlib import Path

class DetectorMalware:
    def __init__(self, directorio):
        """
        Inicializa el detector de malware
        
        Args:
            directorio (str): Directorio a analizar
        """
        self.directorio = directorio
        self.firmas_malware = {
            '4a5e1e4baab89f3a32518a88c31bc87f618d7667': 'Ejemplo de firma 1',
            'b1d5781111d84f7b3fe45a0852e59758cd7a87e5': 'Ejemplo de firma 2'
        }
        self.resultados = {
            'fecha_analisis': datetime.now().isoformat(),
            'directorio': directorio,
            'archivos_analizados': [],
            'archivos_sospechosos': []
        }
        
    def calcular_hash(self, archivo):
        """
        Calcula el hash MD5 de un archivo
        
        Args:
            archivo (str): Ruta al archivo
        """
        try:
            with open(archivo, 'rb') as f:
                return hashlib.md5(f.read()).hexdigest()
        except Exception as e:
            logging.error(f"Error al calcular hash: {str(e)}")
            return None
            
    def analizar_pe(self, archivo):
        """
        Analiza un archivo PE (Portable Executable)
        
        Args:
            archivo (str): Ruta al archivo PE
        """
        try:
            pe = pefile.PE(archivo)
            caracteristicas = {
                'tipo': 'PE',
                'secciones': len(pe.sections),
                'imports': len(pe.DIRECTORY_ENTRY_IMPORT) if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT') else 0,
                'exports': len(pe.DIRECTORY_ENTRY_EXPORT.symbols) if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT') else 0
            }
            return caracteristicas
        except Exception as e:
            logging.error(f"Error al analizar PE: {str(e)}")
            return None
            
    def analizar_archivo(self, archivo):
        """
        Analiza un archivo en busca de indicadores de malware
        
        Args:
            archivo (str): Ruta al archivo
        """
        try:
            hash_archivo = self.calcular_hash(archivo)
            tipo_archivo = magic.from_file(archivo)
            
            resultado = {
                'archivo': archivo,
                'hash': hash_archivo,
                'tipo': tipo_archivo,
                'sospechoso': False,
                'razones': []
            }
            
            # Verificar firma
            if hash_archivo in self.firmas_malware:
                resultado['sospechoso'] = True
                resultado['razones'].append(f"Firma conocida: {self.firmas_malware[hash_archivo]}")
                
            # Analizar archivos PE
            if 'PE32' in tipo_archivo or 'PE64' in tipo_archivo:
                caracteristicas = self.analizar_pe(archivo)
                if caracteristicas:
                    resultado['caracteristicas_pe'] = caracteristicas
                    
                    # Reglas básicas de detección
                    if caracteristicas['secciones'] > 10:
                        resultado['sospechoso'] = True
                        resultado['razones'].append("Demasiadas secciones")
                    if caracteristicas['imports'] < 5:
                        resultado['sospechoso'] = True
                        resultado['razones'].append("Pocas importaciones")
                        
            self.resultados['archivos_analizados'].append(resultado)
            if resultado['sospechoso']:
                self.resultados['archivos_sospechosos'].append(resultado)
                
        except Exception as e:
            logging.error(f"Error al analizar archivo {archivo}: {str(e)}")
            
    def analizar_directorio(self):
        """Analiza todos los archivos en el directorio"""
        try:
            for root, _, files in os.walk(self.directorio):
                for file in files:
                    archivo = os.path.join(root, file)
                    self.analizar_archivo(archivo)
        except Exception as e:
            logging.error(f"Error al analizar directorio: {str(e)}")
            
    def generar_reporte(self, archivo_salida):
        """
        Genera un reporte con los resultados del análisis
        
        Args:
            archivo_salida (str): Ruta al archivo de salida
        """
        try:
            with open(archivo_salida, 'w') as f:
                json.dump(self.resultados, f, indent=4)
            logging.info(f"Reporte generado en {archivo_salida}")
        except Exception as e:
            logging.error(f"Error al generar reporte: {str(e)}")

def main():
    parser = argparse.ArgumentParser(description='Detector de Malware Básico')
    parser.add_argument('directorio', help='Directorio a analizar')
    parser.add_argument('--salida', default='reporte_malware.json', 
                       help='Ruta al archivo de salida')
    
    args = parser.parse_args()
    
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    detector = DetectorMalware(args.directorio)
    detector.analizar_directorio()
    detector.generar_reporte(args.salida)

if __name__ == "__main__":
    main() 