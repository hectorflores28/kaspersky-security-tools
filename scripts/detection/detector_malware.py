#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Detector Avanzado de Malware
Este script realiza una detección avanzada de malware mediante
análisis de firmas, comportamiento y técnicas de evasión.
"""

import os
import hashlib
import pefile
import magic
import logging
from datetime import datetime
import json
import argparse
from pathlib import Path
import yara
import psutil
import time
import win32api
import win32process
import win32con
import win32security
import ctypes
from ctypes import wintypes
import sys

class DetectorMalware:
    def __init__(self, directorio, reglas_yara=None):
        """
        Inicializa el detector de malware
        
        Args:
            directorio (str): Directorio a analizar
            reglas_yara (str): Ruta al archivo de reglas YARA
        """
        self.directorio = directorio
        self.reglas_yara = self.cargar_reglas_yara(reglas_yara) if reglas_yara else None
        self.firmas_malware = {
            '4a5e1e4baab89f3a32518a88c31bc87f618d7667': 'Ejemplo de firma 1',
            'b1d5781111d84f7b3fe45a0852e59758cd7a87e5': 'Ejemplo de firma 2'
        }
        self.resultados = {
            'fecha_analisis': datetime.now().isoformat(),
            'directorio': directorio,
            'archivos_analizados': [],
            'archivos_sospechosos': [],
            'comportamiento': []
        }
        self.tecnicas_evasion = [
            'VirtualBox', 'VMware', 'QEMU', 'Virtual Machine',
            'Wireshark', 'Process Explorer', 'Process Monitor',
            'Debugger', 'Sandbox', 'Analysis'
        ]
        
    def cargar_reglas_yara(self, archivo_reglas):
        """Carga las reglas YARA desde un archivo"""
        try:
            return yara.compile(filepath=archivo_reglas)
        except Exception as e:
            logging.error(f"Error al cargar reglas YARA: {str(e)}")
            return None
            
    def calcular_hash(self, archivo):
        """Calcula el hash MD5 de un archivo"""
        try:
            with open(archivo, 'rb') as f:
                return hashlib.md5(f.read()).hexdigest()
        except Exception as e:
            logging.error(f"Error al calcular hash: {str(e)}")
            return None
            
    def analizar_pe(self, archivo):
        """Analiza un archivo PE (Portable Executable)"""
        try:
            pe = pefile.PE(archivo)
            caracteristicas = {
                'tipo': 'PE',
                'secciones': len(pe.sections),
                'imports': len(pe.DIRECTORY_ENTRY_IMPORT) if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT') else 0,
                'exports': len(pe.DIRECTORY_ENTRY_EXPORT.symbols) if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT') else 0,
                'timestamp': pe.FILE_HEADER.TimeDateStamp,
                'entry_point': pe.OPTIONAL_HEADER.AddressOfEntryPoint,
                'image_base': pe.OPTIONAL_HEADER.ImageBase
            }
            return caracteristicas
        except Exception as e:
            logging.error(f"Error al analizar PE: {str(e)}")
            return None
            
    def detectar_evasion(self, archivo):
        """Detecta técnicas de evasión en el archivo"""
        try:
            with open(archivo, 'rb') as f:
                contenido = f.read().decode('utf-8', errors='ignore')
                for tecnica in self.tecnicas_evasion:
                    if tecnica.lower() in contenido.lower():
                        return True
            return False
        except Exception as e:
            logging.error(f"Error al detectar evasión: {str(e)}")
            return False
            
    def analizar_comportamiento(self, archivo):
        """Analiza el comportamiento del archivo en tiempo real"""
        try:
            proceso = psutil.Popen([str(archivo)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            comportamiento = {
                'pid': proceso.pid,
                'inicio': datetime.now().isoformat(),
                'acciones': []
            }
            
            # Monitorear por 5 segundos
            for _ in range(5):
                try:
                    # Verificar handles
                    handles = win32process.EnumProcessModules(proceso.pid)
                    if len(handles) > 50:  # Umbral arbitrario
                        comportamiento['acciones'].append({
                            'tipo': 'handles_excesivos',
                            'cantidad': len(handles)
                        })
                    
                    # Verificar memoria
                    memoria = proceso.memory_info().rss
                    if memoria > 100 * 1024 * 1024:  # 100MB
                        comportamiento['acciones'].append({
                            'tipo': 'uso_memoria_alto',
                            'memoria': memoria
                        })
                    
                    # Verificar red
                    conexiones = proceso.connections()
                    if conexiones:
                        comportamiento['acciones'].append({
                            'tipo': 'conexiones_red',
                            'conexiones': [str(c) for c in conexiones]
                        })
                    
                    time.sleep(1)
                except Exception as e:
                    logging.error(f"Error en monitoreo: {str(e)}")
            
            proceso.terminate()
            return comportamiento
        except Exception as e:
            logging.error(f"Error en análisis de comportamiento: {str(e)}")
            return None
            
    def analizar_archivo(self, archivo):
        """Analiza un archivo en busca de indicadores de malware"""
        try:
            hash_archivo = self.calcular_hash(archivo)
            tipo_archivo = magic.from_file(archivo)
            
            resultado = {
                'archivo': str(archivo),
                'hash': hash_archivo,
                'tipo': tipo_archivo,
                'sospechoso': False,
                'razones': [],
                'comportamiento': None
            }
            
            # Verificar firma
            if hash_archivo in self.firmas_malware:
                resultado['sospechoso'] = True
                resultado['razones'].append(f"Firma conocida: {self.firmas_malware[hash_archivo]}")
            
            # Analizar con YARA
            if self.reglas_yara:
                matches = self.reglas_yara.match(str(archivo))
                if matches:
                    resultado['sospechoso'] = True
                    resultado['razones'].append(f"Regla YARA: {[m.rule for m in matches]}")
            
            # Analizar archivos PE
            if 'PE32' in tipo_archivo or 'PE64' in tipo_archivo:
                caracteristicas = self.analizar_pe(archivo)
                if caracteristicas:
                    resultado['caracteristicas_pe'] = caracteristicas
                    
                    # Reglas básicas de detección
                    if caracteristicas['secciones'] > 10:
                        resultado['sospechoso'] = True
                        resultado['razones'].append("Demasiadas secciones")
                    if caracteristicas['imports'] < 5:
                        resultado['sospechoso'] = True
                        resultado['razones'].append("Pocas importaciones")
            
            # Detectar técnicas de evasión
            if self.detectar_evasion(archivo):
                resultado['sospechoso'] = True
                resultado['razones'].append("Técnicas de evasión detectadas")
            
            # Analizar comportamiento
            if resultado['sospechoso']:
                comportamiento = self.analizar_comportamiento(archivo)
                if comportamiento:
                    resultado['comportamiento'] = comportamiento
                    self.resultados['comportamiento'].append(comportamiento)
            
            self.resultados['archivos_analizados'].append(resultado)
            if resultado['sospechoso']:
                self.resultados['archivos_sospechosos'].append(resultado)
                
        except Exception as e:
            logging.error(f"Error al analizar archivo {archivo}: {str(e)}")
            
    def analizar_directorio(self):
        """Analiza todos los archivos en el directorio"""
        try:
            for root, _, files in os.walk(self.directorio):
                for file in files:
                    archivo = Path(root) / file
                    self.analizar_archivo(archivo)
        except Exception as e:
            logging.error(f"Error al analizar directorio: {str(e)}")
            
    def generar_reporte(self, archivo_salida):
        """Genera un reporte con los resultados del análisis"""
        try:
            with open(archivo_salida, 'w') as f:
                json.dump(self.resultados, f, indent=4)
            logging.info(f"Reporte generado en {archivo_salida}")
        except Exception as e:
            logging.error(f"Error al generar reporte: {str(e)}")

def main():
    parser = argparse.ArgumentParser(description='Detector Avanzado de Malware')
    parser.add_argument('directorio', help='Directorio a analizar')
    parser.add_argument('--reglas', help='Archivo de reglas YARA')
    parser.add_argument('--salida', default='reporte_malware.json', 
                       help='Ruta al archivo de salida')
    
    args = parser.parse_args()
    
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    detector = DetectorMalware(args.directorio, args.reglas)
    detector.analizar_directorio()
    detector.generar_reporte(args.salida)

if __name__ == "__main__":
    main() 