#!/usr/bin/env python3
import os
import sys
import hashlib
import pefile
import magic
import json
import yara
import pandas as pd
from datetime import datetime
from typing import Dict, List, Any

class MalwareDetector:
    def __init__(self):
        self.suspicious_strings = [
            "http://", "https://", "cmd.exe", "powershell",
            "regsvr32", "schtasks", "wscript", "cscript",
            "net user", "net group", "net localgroup"
        ]
        
        # Basic YARA rules
        self.yara_rules = """
        rule suspicious_behavior {
            strings:
                $s1 = "CreateRemoteThread" ascii
                $s2 = "VirtualAllocEx" ascii
                $s3 = "WriteProcessMemory" ascii
            condition:
                any of them
        }
        """
        
        self.yara_rules = yara.compile(source=self.yara_rules)

    def calculate_file_hash(self, file_path: str) -> str:
        """Calculates the MD5 hash of a file."""
        try:
            with open(file_path, 'rb') as f:
                file_hash = hashlib.md5()
                while chunk := f.read(8192):
                    file_hash.update(chunk)
            return file_hash.hexdigest()
        except Exception as e:
            print(f"Error calculating hash: {e}")
            return ""

    def analyze_strings(self, file_path: str) -> List[str]:
        """Analyzes strings in an executable file."""
        suspicious_found = []
        try:
            with open(file_path, 'rb') as f:
                content = f.read()
                for string in self.suspicious_strings:
                    if string.encode() in content:
                        suspicious_found.append(string)
        except Exception as e:
            print(f"Error analyzing strings: {e}")
        return suspicious_found

    def analyze_pe_file(self, file_path: str) -> Dict[str, Any]:
        """Analyzes a PE file and extracts relevant information."""
        try:
            pe = pefile.PE(file_path)
            info = {
                'file_type': 'PE',
                'machine_type': hex(pe.FILE_HEADER.Machine),
                'timestamp': datetime.fromtimestamp(pe.FILE_HEADER.TimeDateStamp).strftime('%Y-%m-%d %H:%M:%S'),
                'sections': [],
                'imports': [],
                'suspicious_characteristics': []
            }

            # Analyze sections
            for section in pe.sections:
                section_info = {
                    'name': section.Name.decode().rstrip('\x00'),
                    'virtual_address': hex(section.VirtualAddress),
                    'virtual_size': hex(section.Misc_VirtualSize),
                    'raw_size': hex(section.SizeOfRawData),
                    'characteristics': hex(section.Characteristics)
                }
                info['sections'].append(section_info)

                # Detect suspicious characteristics
                if section.Characteristics & 0x20000000:  # IMAGE_SCN_MEM_EXECUTE
                    if section.Characteristics & 0x40000000:  # IMAGE_SCN_MEM_WRITE
                        info['suspicious_characteristics'].append('Executable and writable section')

            # Analyze imports
            if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
                for entry in pe.DIRECTORY_ENTRY_IMPORT:
                    dll_name = entry.dll.decode()
                    for imp in entry.imports:
                        if imp.name:
                            info['imports'].append(f"{dll_name}:{imp.name.decode()}")

            # Detect packers
            if len(info['sections']) < 3:
                info['suspicious_characteristics'].append('Few sections (possible packer)')
            
            return info
        except Exception as e:
            print(f"Error analyzing PE file: {e}")
            return {}

    def scan_file(self, file_path: str) -> Dict[str, Any]:
        """Scans an individual file and generates a report."""
        report = {
            'file_path': file_path,
            'file_type': magic.from_file(file_path),
            'md5_hash': self.calculate_file_hash(file_path),
            'analysis_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'suspicious_strings': [],
            'yara_matches': [],
            'pe_analysis': {},
            'risk_score': 0
        }

        # String analysis
        report['suspicious_strings'] = self.analyze_strings(file_path)
        if report['suspicious_strings']:
            report['risk_score'] += len(report['suspicious_strings']) * 5

        # YARA analysis
        try:
            matches = self.yara_rules.match(file_path)
            report['yara_matches'] = [str(match) for match in matches]
            if matches:
                report['risk_score'] += len(matches) * 10
        except Exception as e:
            print(f"Error in YARA analysis: {e}")

        # PE analysis
        if report['file_type'].startswith('PE32'):
            report['pe_analysis'] = self.analyze_pe_file(file_path)
            if report['pe_analysis'].get('suspicious_characteristics'):
                report['risk_score'] += len(report['pe_analysis']['suspicious_characteristics']) * 15

        return report

    def scan_directory(self, directory: str) -> List[Dict[str, Any]]:
        """Scans a directory for suspicious files."""
        suspicious_extensions = ['.exe', '.dll', '.sys', '.bat', '.ps1', '.vbs', '.js', '.jar']
        reports = []

        for root, _, files in os.walk(directory):
            for file in files:
                if any(file.lower().endswith(ext) for ext in suspicious_extensions):
                    file_path = os.path.join(root, file)
                    try:
                        report = self.scan_file(file_path)
                        if report['risk_score'] > 0:  # Only include files with some risk
                            reports.append(report)
                    except Exception as e:
                        print(f"Error analyzing {file_path}: {e}")

        return reports

    def generate_report(self, reports: List[Dict[str, Any]], output_file: str):
        """Generates a report in JSON and CSV format."""
        # JSON report
        with open(output_file + '.json', 'w') as f:
            json.dump(reports, f, indent=4)

        # CSV report
        df = pd.DataFrame(reports)
        df.to_csv(output_file + '.csv', index=False)

def main():
    if len(sys.argv) != 2:
        print("Usage: python malware_detector.py <directory>")
        sys.exit(1)

    directory = sys.argv[1]
    if not os.path.isdir(directory):
        print(f"Error: {directory} is not a valid directory")
        sys.exit(1)

    detector = MalwareDetector()
    reports = detector.scan_directory(directory)
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    output_file = f"malware_scan_report_{timestamp}"
    
    detector.generate_report(reports, output_file)
    print(f"Report generated: {output_file}.json and {output_file}.csv")

if __name__ == "__main__":
    main() 